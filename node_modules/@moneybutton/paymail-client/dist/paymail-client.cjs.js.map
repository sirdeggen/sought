{"version":3,"file":"paymail-client.cjs.js","sources":["../src/constants.js","../src/dns-client.js","../src/dns-over-https.js","../src/EndpointResolver.js","../src/VerifiableMessage.js","../src/RequestBodyFactory.js","../src/Clock.js","../src/errors/PaymailNotFound.js","../src/BrowserDns.js","../src/PaymailClient.js"],"sourcesContent":["export const Capabilities = {\n  pki: 'pki',\n  paymentDestination: 'paymentDestination',\n  senderValidation: '6745385c3fc0',\n  verifyPublicKeyOwner: 'a9f510c16bde',\n  publicProfile: 'f12f968c92d6',\n  receiveTransaction: 'receive-transactions-alpha-state'\n}\n","// import { DnsOverHttps } from \"./dns-over-https\"\n\nclass DnsClient {\n  constructor (dns, doh) {\n    this.dns = dns\n    this.doh = doh\n  }\n\n  async checkSrv (aDomain) {\n    return new Promise((resolve, reject) => {\n      this.dns.resolveSrv(`_bsvalias._tcp.${aDomain}`, async (err, result) => {\n        try {\n          if (err && (err.code === 'ENODATA' || err.code === 'ENOTFOUND')) {\n            return resolve({\n              domain: aDomain,\n              port: 443,\n              isSecure: true\n            })\n          }\n          if (err) {\n            return reject(err)\n          }\n\n          const { name: domainFromDns, port, isSecure } = result[0]\n          resolve({\n            domain: domainFromDns,\n            port,\n            isSecure: this.checkDomainIsSecure(domainFromDns, aDomain) || isSecure\n          })\n        } catch (err) {\n          return reject(err)\n        }\n      })\n    }).then(result => {\n      if (result.isSecure) {\n        return result\n      } else {\n        return this.validateDnssec(aDomain)\n      }\n    }, (err) => {\n      console.error(err)\n      return err\n    })\n  }\n\n  checkDomainIsSecure (srvResponseDomain, originalDomain) {\n    if (this.domainsAreEqual(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.isHandcashDomain(originalDomain)) { // tell rafa to fix handcash and we can remove the special case :)\n      return this.domainsAreEqual('handcash-paymail-production.herokuapp.com', srvResponseDomain) || this.domainsAreEqual('handcash-cloud-production.herokuapp.com', srvResponseDomain)\n    } else if (this.isHandcashInternalDomain(originalDomain)) {\n      return this.domainsAreEqual('handcash-cloud-staging.herokuapp.com', srvResponseDomain)\n    } else if (this.domainsAreEqual('localhost', srvResponseDomain)) {\n      return true\n    } else if (this.isMoneyButtonDomain(srvResponseDomain)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  isMoneyButtonDomain (aDomain) {\n    return this.domainsAreEqual(aDomain, 'moneybutton.com') || this.domainsAreEqual(aDomain, 'www.moneybutton.com')\n  }\n\n  responseIsWwwSubdomain (srvResponseDomain, originalDomain) {\n    return this.domainsAreEqual(srvResponseDomain, `www.${originalDomain}`)\n  }\n\n  isHandcashDomain (aDomain) {\n    return this.domainsAreEqual('handcash.io', aDomain)\n  }\n\n  isHandcashInternalDomain (aDomain) {\n    return this.domainsAreEqual('internal.handcash.io', aDomain)\n  }\n\n  async validateDnssec (aDomain) {\n    const dnsResponse = await this.doh.queryBsvaliasDomain(aDomain)\n    if (dnsResponse.Status !== 0 || !dnsResponse.Answer) {\n      throw new Error(`Insecure domain.`)\n    }\n    const data = dnsResponse.Answer[0].data.split(' ')\n    const port = data[2]\n    const responseDomain = data[3]\n    if (!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain)) {\n      throw new Error(`Insecure domain.`)\n    }\n    return {\n      port,\n      domain: responseDomain,\n      isSecure: dnsResponse.AD\n    }\n  }\n\n  domainsAreEqual (domain1, domain2) {\n    return domain1.replace(/\\.$/, '') === domain2.replace(/\\.$/, '')\n  }\n}\n\nexport { DnsClient }\n","class DnsOverHttps {\n  constructor (fetch, config) {\n    this.fetch = fetch\n    this.config = config\n  }\n\n  async resolveSrv (aDomain) {\n    const response = await this.fetch(`${this.config.baseUrl}?name=${aDomain}&type=SRV&cd=0`)\n    const body = await response.json()\n    return body\n  }\n\n  async queryBsvaliasDomain (aDomain) {\n    return this.resolveSrv(`_bsvalias._tcp.${aDomain}`)\n  }\n}\n\nexport { DnsOverHttps }\n","import { Capabilities } from './constants'\nimport { DnsClient } from './dns-client'\nimport { DnsOverHttps } from './dns-over-https'\n\nclass EndpointResolver {\n  constructor (dns = null, fetch) {\n    this.dnsClient = new DnsClient(dns, new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' }))\n\n    this.fetch = fetch\n    this._cache = {}\n  }\n\n  static create (dnsClient, fetch) {\n    const instance = new EndpointResolver(null, fetch)\n    instance.dnsClient = dnsClient\n    return instance\n  }\n\n  async getIdentityUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, Capabilities.pki)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const identityUrl = apiDescriptor.capabilities.pki\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return identityUrl\n  }\n\n  async getAddressUrlFor (aPaymail) {\n    const [ alias, domain ] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, Capabilities.paymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const addressUrl = apiDescriptor.capabilities.paymentDestination\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return addressUrl\n  }\n\n  async getVerifyUrlFor (aPaymail, aPubkey) {\n    const [ alias, domain ] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, Capabilities.verifyPublicKeyOwner)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[Capabilities.verifyPublicKeyOwner]\n      .replace('{alias}', alias).replace('{domain.tld}', domain).replace('{pubkey}', aPubkey)\n    return url\n  }\n\n  async getPublicProfileUrlFor (aPaymail) {\n    const [ alias, domain ] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, Capabilities.publicProfile)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[Capabilities.publicProfile]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSendTxUrlFor (aPaymail) {\n    const [ alias, domain ] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, Capabilities.receiveTransaction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[Capabilities.receiveTransaction]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async domainHasCapability (aDomain, capability) {\n    const apiDescriptor = await this.getApiDescriptionFor(aDomain)\n    return !!apiDescriptor.capabilities[capability]\n  }\n\n  async getApiDescriptionFor (aDomain) {\n    if (this._cache[aDomain]) {\n      return this._cache[aDomain]\n    }\n    const { domain, port } = await this.getWellKnownBaseUrl(aDomain)\n    const apiDescriptor = this.fetchApiDescriptor(domain, port)\n    this._cache[aDomain] = apiDescriptor\n    return apiDescriptor\n  }\n\n  async fetchApiDescriptor (domain, port) {\n    const protocol = (domain === 'localhost' || domain === 'localhost.') ? 'http' : 'https'\n    const wellKnown = await this.fetch(`${protocol}://${domain}:${port}/.well-known/bsvalias`, { credentials: 'omit' })\n    const apiDescriptor = await wellKnown.json()\n    return apiDescriptor\n  }\n\n  async getWellKnownBaseUrl (aDomain) {\n    return this.dnsClient.checkSrv(aDomain)\n  }\n\n  async ensureCapabilityFor (aDomain, aCapability) {\n    if (!await this.domainHasCapability(aDomain, aCapability)) {\n      throw new Error(`Unknown capability \"${aCapability}\" for \"${aDomain}\"`)\n    }\n  }\n}\n\nexport { EndpointResolver }\n","class VerifiableMessage {\n  constructor (parts, bsv = null) {\n    if (bsv === null) {\n      bsv = require('bsv')\n      bsv.Message = require('bsv/message')\n    }\n    this.bsv = bsv\n    const concatenated = Buffer.from(parts.join(''))\n    const hashed = this.bsv.crypto.Hash.sha256(concatenated).toString('hex')\n    this.message = new this.bsv.Message(hashed)\n  }\n\n  static forBasicAddressResolution ({\n    senderHandle,\n    amount,\n    dt,\n    purpose\n  }) {\n    if (dt.toISOString) {\n      dt = dt.toISOString()\n    }\n\n    return new VerifiableMessage([\n      senderHandle,\n      amount || '0',\n      dt,\n      purpose\n    ])\n  }\n\n  sign (wifPrivateKey) {\n    return this.message.sign(this.bsv.PrivateKey.fromWIF(wifPrivateKey))\n  }\n\n  verify (keyAddress, signature) {\n    return this.message.verify(keyAddress, signature)\n  }\n}\n\nexport { VerifiableMessage }\n","import { VerifiableMessage } from './VerifiableMessage'\n\nclass RequestBodyFactory {\n  constructor (clock) {\n    this.clock = clock\n  }\n  buildBodyToRequestAddress (senderInfo, privateKey = null) {\n    const {\n      senderHandle,\n      amount,\n      senderName,\n      purpose,\n      pubkey,\n      signature: providedSignature\n    } = senderInfo\n\n    if (!providedSignature && privateKey === null) {\n      throw new Error('Missing private key or signature')\n    }\n\n    let dt, signature\n    if (providedSignature) {\n      if (!senderInfo.dt) {\n        throw new Error('missing datetime for given signature')\n      }\n      dt = senderInfo.dt\n      signature = providedSignature\n    } else {\n      dt = this.clock.now()\n      signature = VerifiableMessage.forBasicAddressResolution({\n        senderHandle,\n        amount,\n        dt,\n        purpose\n      }).sign(privateKey)\n    }\n\n    return {\n      senderHandle,\n      senderName,\n      purpose,\n      dt,\n      amount: amount || null,\n      pubkey,\n      signature\n    }\n  }\n\n  buildBodySendTx (transactions, metadata, reference) {\n    return { transactions, metadata, reference }\n  }\n}\n\nexport { RequestBodyFactory }\n","import moment from 'moment'\n\nclass Clock {\n  now () {\n    return moment()\n  }\n}\n\nexport { Clock }\n","class PaymailNotFound extends Error {\n  constructor (message, paymail) {\n    super(message)\n    this.paymail = paymail\n  }\n}\n\nexport { PaymailNotFound }\n","import { DnsOverHttps } from './dns-over-https'\n\nclass BrowserDns {\n  constructor (fetch) {\n    this.doh = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async resolveSrv (aDomain, aCallback) {\n    try {\n      const response = await this.doh.resolveSrv(aDomain)\n      if (response.Status === 0) {\n        const data = response.Answer.map(record => {\n          const [ priority, weight, port, name ] = record.data.split(' ')\n          return {\n            priority,\n            weight,\n            port,\n            name,\n            isSecure: response.AD\n          }\n        })\n        aCallback(null, data)\n      } else {\n        aCallback(new Error('error during dns query'))\n      }\n    } catch (e) {\n      aCallback(e)\n    }\n  }\n}\n\nexport { BrowserDns }\n","import { EndpointResolver } from './EndpointResolver'\nimport { RequestBodyFactory } from './RequestBodyFactory'\nimport { Clock } from './Clock'\nimport { PaymailNotFound } from './errors/PaymailNotFound'\nimport { Capabilities } from './constants'\nimport fetch from 'isomorphic-fetch'\nimport { BrowserDns } from './BrowserDns'\n\nclass PaymailClient {\n  constructor (dns = null, fetch2 = null, clock = null, bsv = null) {\n    if (fetch2 === null) {\n      fetch2 = fetch\n    }\n    if (dns === null) {\n      dns = new BrowserDns(fetch2)\n    }\n    if (bsv === null) {\n      bsv = require('bsv')\n    }\n    this.bsv = bsv\n    this.resolver = new EndpointResolver(dns, fetch2)\n    this.fetch = fetch2\n    this.requestBodyFactory = new RequestBodyFactory(clock !== null ? clock : new Clock())\n  }\n\n  /**\n   * Uses pki flow to query for an identity key for a given paymail address.\n   *\n   * @param {String} paymail - a paymail address\n   */\n  async getPublicKey (paymail) {\n    const identityUrl = await this.resolver.getIdentityUrlFor(paymail)\n    const response = await this.fetch(identityUrl, { credentials: 'omit' })\n    const { pubkey } = await response.json()\n    return pubkey\n  }\n\n  /**\n   * Uses `Basic Address Resolution` flow to query for a payment for output for the\n   * given paymail address.\n   *\n   * @param {String} aPaymail - a paymail address\n   * @param {Object} senderInfo - Object containing sender info\n   * @param {String} senderInfo.senderHandle - Sender paymail address\n   * @param {String} senderInfo.amount - Optional. Required amount.\n   * @param {String} senderInfo.senderName - Optional. Sender name.\n   * @param {String} senderInfo.purpose - Optional. Purpose of the payment.\n   * @param {String} senderInfo.pubkey - Optional. Public key used to sign the message.\n   * @param {String} senderInfo.signature - Optional. Valid signature according to paymail specification.\n   * @param {String} privateKey - Optional. private key to sign the request.\n   */\n  async getOutputFor (aPaymail, senderInfo, privateKey = null) {\n    const addressUrl = await this.resolver.getAddressUrlFor(aPaymail)\n    const response = await this.fetch(addressUrl, {\n      method: 'POST',\n      credentials: 'omit',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.requestBodyFactory.buildBodyToRequestAddress(senderInfo, privateKey))\n    })\n    if (!response.ok) {\n      throw new PaymailNotFound(`Paymail not found: ${aPaymail}`, aPaymail)\n    }\n    const { output } = await response.json()\n    return output\n  }\n\n  /**\n   * Verify if the given public address belongs to the given\n   * paymail address.\n   *\n   * @param {String} pubkey - Public key to check.\n   * @param {String} paymail - a paymail address\n   */\n  async verifyPubkeyOwner (pubkey, paymail) {\n    const url = await this.resolver.getVerifyUrlFor(paymail, pubkey)\n    const response = await this.fetch(url, { credentials: 'omit' })\n    const body = await response.json()\n    const { match } = body\n    return match\n  }\n\n  /**\n   * Verifies if a given signature is valid for a given message. It uses\n   * different strategies depending on the capabilities of the server\n   * and the parameters Given. The priority order is.\n   * - If paymail is not provided, then normal signature verification is performed.\n   * - Use provided key (and check that belongs to given paymail address).\n   * - Get a new pubkey for given paymail address using pki.\n   * - If there is no way to intereact with the owner of the domain to verify the public key it returns false.\n   *\n   * @param {Message} message - Message to verify\n   * @param {String} signature - Signature\n   * @param {String} paymail - Signature owner paymail\n   * @param {String} pubkey - Optional. Public key that validates the signature.\n   */\n  async isValidSignature (message, signature, paymail = null, pubkey = null) {\n    if (paymail == null && pubkey === null) {\n      throw new Error('Must specify either paymail or pubkey')\n    }\n    let senderPublicKey\n    if (paymail) {\n      if (pubkey && await this.resolver.domainHasCapability(paymail.split('@')[1], Capabilities.verifyPublicKeyOwner)) {\n        if (await this.verifyPubkeyOwner(pubkey, paymail)) {\n          senderPublicKey = this.bsv.PublicKey.fromString(pubkey)\n        } else {\n          return false\n        }\n      } else {\n        const hasPki = await this.resolver.domainHasCapability(paymail.split('@')[1], Capabilities.pki)\n        if (hasPki) {\n          const identityKey = await this.getPublicKey(paymail)\n          senderPublicKey = this.bsv.PublicKey.fromString(identityKey)\n        } else {\n          return false\n        }\n      }\n    }\n\n    const senderKeyAddress = this.bsv.Address.fromPublicKey(senderPublicKey || pubkey)\n    try {\n      const verified = message.verify(senderKeyAddress.toString(), signature)\n      return verified\n    } catch (err) {\n      return false\n    }\n  }\n\n  /**\n   * Gets the public profile information using the \"Public Profile\" protocol.\n   *\n   * @param {String} paymail - a paymail address\n   * @param {String} s - the preferred size of the image\n   */\n  async getPublicProfile (paymail) {\n    let publicProfileUrl = await this.resolver.getPublicProfileUrlFor(paymail)\n    const response = await this.fetch(publicProfileUrl, { credentials: 'omit' })\n    if (!response.ok) {\n      const body = await response.json()\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`)\n    }\n    const { avatar, name } = await response.json()\n    return { avatar, name }\n  }\n\n  async sendRawTx (targetPaymail, transactions = [], metadata = {}, reference = null) {\n    if (!transactions.every(tx => tx.hex)) {\n      throw new Error('Transactions should include \"hex\" field')\n    }\n    if (transactions.length === 0) {\n      throw new Error('Transaction array should not be empty.')\n    }\n    let receiveTxUrl = await this.resolver.getSendTxUrlFor(targetPaymail)\n    const response = await this.fetch(receiveTxUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.requestBodyFactory.buildBodySendTx(transactions, metadata, reference))\n    })\n    if (!response.ok) {\n      const body = await response.json()\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`)\n    }\n    return response.json()\n  }\n}\n\nexport { PaymailClient }\n"],"names":["Capabilities","pki","paymentDestination","senderValidation","verifyPublicKeyOwner","publicProfile","receiveTransaction","DnsClient","constructor","dns","doh","checkSrv","aDomain","Promise","resolve","reject","resolveSrv","err","result","code","domain","port","isSecure","name","domainFromDns","checkDomainIsSecure","then","validateDnssec","console","error","srvResponseDomain","originalDomain","domainsAreEqual","responseIsWwwSubdomain","isHandcashDomain","isHandcashInternalDomain","isMoneyButtonDomain","dnsResponse","queryBsvaliasDomain","Status","Answer","Error","data","split","responseDomain","AD","domain1","domain2","replace","DnsOverHttps","fetch","config","response","baseUrl","body","json","EndpointResolver","dnsClient","_cache","create","instance","getIdentityUrlFor","aPaymail","alias","ensureCapabilityFor","apiDescriptor","getApiDescriptionFor","identityUrl","capabilities","getAddressUrlFor","addressUrl","getVerifyUrlFor","aPubkey","url","getPublicProfileUrlFor","getSendTxUrlFor","domainHasCapability","capability","getWellKnownBaseUrl","fetchApiDescriptor","protocol","wellKnown","credentials","aCapability","VerifiableMessage","parts","bsv","require","Message","concatenated","Buffer","from","join","hashed","crypto","Hash","sha256","toString","message","forBasicAddressResolution","senderHandle","amount","dt","purpose","toISOString","sign","wifPrivateKey","PrivateKey","fromWIF","verify","keyAddress","signature","RequestBodyFactory","clock","buildBodyToRequestAddress","senderInfo","privateKey","senderName","pubkey","providedSignature","now","buildBodySendTx","transactions","metadata","reference","Clock","moment","PaymailNotFound","paymail","BrowserDns","aCallback","map","record","priority","weight","e","PaymailClient","fetch2","resolver","requestBodyFactory","getPublicKey","getOutputFor","method","headers","JSON","stringify","ok","output","verifyPubkeyOwner","match","isValidSignature","senderPublicKey","PublicKey","fromString","hasPki","identityKey","senderKeyAddress","Address","fromPublicKey","verified","getPublicProfile","publicProfileUrl","avatar","sendRawTx","targetPaymail","every","tx","hex","length","receiveTxUrl"],"mappings":"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"}