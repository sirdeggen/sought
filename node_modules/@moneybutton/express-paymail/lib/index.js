"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PaymailError", {
  enumerable: true,
  get: function get() {
    return _PaymailError.PaymailError;
  }
});
exports.buildRouter = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _express = _interopRequireDefault(require("express"));

var _expressAsyncHandler = _interopRequireDefault(require("express-async-handler"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _cors = _interopRequireDefault(require("cors"));

var _buildGetPaymentDestinationRouter = require("./buildGetPaymentDestinationRouter");

var _buildIndentityRouter = require("./buildIndentityRouter");

var _buildVerifyPubkeyRouter = require("./buildVerifyPubkeyRouter");

var _buildPublicProfileRouter = require("./buildPublicProfileRouter");

var _errorHandler = require("./error-handler");

var _paymailClient = require("@moneybutton/paymail-client");

var _dns = _interopRequireDefault(require("dns"));

var _isomorphicFetch = _interopRequireDefault(require("isomorphic-fetch"));

var _urlJoin = _interopRequireDefault(require("url-join"));

var _url = require("url");

var _constants = require("./constants");

var _buildReceiveTransactionRouter = require("./buildReceiveTransactionRouter");

var _PaymailError = require("./errors/PaymailError");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getBaseRoute = function getBaseRoute(config) {
  return config.basePath || '/';
};

var joinUrls = function joinUrls() {
  return _urlJoin["default"].apply(void 0, arguments);
};

var validateBaseUrl = function validateBaseUrl(url) {
  try {
    url = new _url.URL(url);

    if (url.protocol !== 'https:' && /^locahost:?\d*$/.test(url.hostname)) {
      console.warn('Paymail should always use ssl on production');
    }

    return url;
  } catch (err) {
    throw new Error("Invalid base url: ".concat(url), err);
  }
};
/**
 * @callback getIdentityKey
 * @param {String} localPart - Local part of a paymail.
 * @param {String} domain - Domain of a paymail.
 * @returns {String} A string representing an identity public key for given paymail.
 *
 * @callback getPaymentDestination
 * @param {String} localPart - Local part of a paymail.
 * @param {String} domain - Domain of a paymail.
 * @param {Object} body - Request's body already parsed and converted into a JS object.
 * @param {Object} helpers - A bunch of handful functions to generate outputs.
 *
 * @callback verifyPublicKeyOwner
 * @param {String} localPart - Local part of a paymail.
 * @param {String} domain - Domain of a paymail.
 * @param {String} publicKeyToCheck - Public key to check agains given paymail.
 */

/**
 * Builds the main paymail router.
 *
 * @param {String} baseUrl - domain where the app is going to be placed. i.e https://moneybutton.com
 * @param {Object} config - Object containing the configuration for paymail router.
 * @param {getIdentityKey} config.getIdentityKey - Callback to get an identity key from an specific paymail address.
 * @param {getPaymentDestination} config.getPaymentDestination - Callback to get a payment output to send money to the owner of an specific paymail address.
 * @param {verifyPublicKeyOwner} config.verifyPublicKeyOwner - Callback to check if a public key belongs to a user.
 * @param {boolean} config.requestSenderValidation - If true requester identity is required and validated always.
 * @param {function} config.errorHandler - Express middleware to handle errors in custom way.
 */


var buildPaymailRouter = function buildPaymailRouter(baseUrl, config) {
  var baseRouter = _express["default"].Router();

  baseRouter.use(_bodyParser["default"].json({
    type: 'application/json'
  }));

  var apiRouter = _express["default"].Router();

  baseUrl = validateBaseUrl(baseUrl);

  if (config.useCors) {
    baseRouter.use((0, _cors["default"])(config.corsConfig || {}));
  }

  var capabilities = {};
  capabilities[_constants.CapabilityCodes.requestSenderValidation] = !!config.requestSenderValidation;
  (0, _buildIndentityRouter.buildIdentityRouter)(config, function (router) {
    apiRouter.use(router);
    capabilities.pki = joinUrls(baseUrl.href, getBaseRoute(config), '/id/{alias}@{domain.tld}');
  });
  (0, _buildGetPaymentDestinationRouter.buildGetPaymentDestinationRouter)(config, function (router) {
    apiRouter.use(router);
    capabilities.paymentDestination = joinUrls(baseUrl.href, getBaseRoute(config), '/address/{alias}@{domain.tld}');
  });
  (0, _buildVerifyPubkeyRouter.buildVerifyPubkeyRouter)(config, function (router) {
    apiRouter.use(router);
    capabilities[_constants.CapabilityCodes.verifyPublicKeyOwner] = joinUrls(baseUrl.href, getBaseRoute(config), '/verifypubkey/{alias}@{domain.tld}/{pubkey}');
  });
  (0, _buildPublicProfileRouter.buildPublicProfileRouter)(config, function (router) {
    console.warn('This feature is in alpha state. Paymail profile protocol is still being discussed.');
    apiRouter.use(router);
    capabilities[_constants.CapabilityCodes.publicProfile] = joinUrls(baseUrl.href, getBaseRoute(config), '/public-profile/{alias}@{domain.tld}');
  });
  (0, _buildReceiveTransactionRouter.buildReceiveTransactionRouter)(config, function (router) {
    // console.warn('This feature is in alpha state. Paymail profile protocol is still being discussed.')
    apiRouter.use(router);
    capabilities[_constants.CapabilityCodes.receiveTransaction] = joinUrls(baseUrl.href, getBaseRoute(config), '/receive-transaction/{alias}@{domain.tld}');
  });
  baseRouter.get('/.well-known/bsvalias', (0, _expressAsyncHandler["default"])(
  /*#__PURE__*/
  function () {
    var _ref = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(req, res) {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              res.type('application/json');
              res.send({
                bsvalias: '1.0',
                capabilities: capabilities
              });

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }()));
  baseRouter.use(getBaseRoute(config), apiRouter);
  baseRouter.use(config.errorHandler);
  return baseRouter;
};

var buildRouter = function buildRouter(baseDomain, config) {
  return buildPaymailRouter(baseDomain, _objectSpread({
    paymailClient: new _paymailClient.PaymailClient(_dns["default"], _isomorphicFetch["default"]),
    useCors: true,
    corsConfig: {},
    errorHandler: _errorHandler.errorHandler
  }, config));
};

exports.buildRouter = buildRouter;