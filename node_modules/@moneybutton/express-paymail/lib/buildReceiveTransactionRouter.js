"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildReceiveTransactionRouter = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _express = _interopRequireDefault(require("express"));

var _expressAsyncHandler = _interopRequireDefault(require("express-async-handler"));

var _PaymailError = require("./errors/PaymailError");

var _httpStatusCodes = _interopRequireDefault(require("http-status-codes"));

var validateTransactions = function validateTransactions(transactions) {
  var validAttributes = transactions.every(function (tx) {
    var keys = Object.keys(tx);
    return keys.length === 1 && keys[0] === 'hex';
  });

  if (!validAttributes) {
    throw new _PaymailError.PaymailError('invalid transaction format.', _httpStatusCodes["default"].BAD_REQUEST);
  }
};

var buildResponseHandlers = function buildResponseHandlers(req, res) {
  return {
    ok: function ok(txid) {
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
      res.send({
        txid: txid,
        message: message
      });
    },
    paymentError: function paymentError(message) {
      throw new _PaymailError.PaymailError(message, _httpStatusCodes["default"].UNPROCESSABLE_ENTITY, 'tx-error');
    },
    notFound: function notFound() {
      throw new _PaymailError.PaymailError("Paymail not found: ".concat(req.params.paymail), _httpStatusCodes["default"].NOT_FOUND, 'not-found');
    },
    unexpectedError: function unexpectedError() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unexpected error';
      throw new Error(message);
    }
  };
};

var buildReceiveTransactionRouter = function buildReceiveTransactionRouter(config, ifPresent) {
  if (config.receiveTransaction) {
    var router = _express["default"].Router();

    router.post('/receive-transaction/:paymail', (0, _expressAsyncHandler["default"])(
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(req, res) {
        var _req$body, transactions, metadata, reference, _req$params$paymail$s, _req$params$paymail$s2, localPart, domain;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _req$body = req.body, transactions = _req$body.transactions, metadata = _req$body.metadata, reference = _req$body.reference;

                if (transactions) {
                  _context.next = 3;
                  break;
                }

                throw new _PaymailError.PaymailError('transactions array missing', _httpStatusCodes["default"].BAD_REQUEST);

              case 3:
                validateTransactions(transactions);

                if (metadata) {
                  _context.next = 6;
                  break;
                }

                throw new _PaymailError.PaymailError('metadata is missing', _httpStatusCodes["default"].BAD_REQUEST);

              case 6:
                _req$params$paymail$s = req.params.paymail.split('@'), _req$params$paymail$s2 = (0, _slicedToArray2["default"])(_req$params$paymail$s, 2), localPart = _req$params$paymail$s2[0], domain = _req$params$paymail$s2[1];
                _context.next = 9;
                return config.receiveTransaction(localPart, domain, {
                  transactions: transactions,
                  metadata: metadata,
                  reference: reference
                }, buildResponseHandlers(req, res));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()));
    ifPresent(router);
  }
};

exports.buildReceiveTransactionRouter = buildReceiveTransactionRouter;