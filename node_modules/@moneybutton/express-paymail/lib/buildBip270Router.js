"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildBip270Router = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _express = _interopRequireDefault(require("express"));

var _expressAsyncHandler = _interopRequireDefault(require("express-async-handler"));

var buildBip270Router = function buildBip270Router(config, baseUrl, ifPresent) {
  // TODO(ryanxcharles): Also validate the sender paymail
  if (config.bip270) {
    var router = _express["default"].Router();

    router.get('/bip270/:paymail/', (0, _expressAsyncHandler["default"])(
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(req, res) {
        var _req$params$paymail$s, _req$params$paymail$s2, name, domain, amount, purpose, prid, paymentUrl, paymentRequest;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _req$params$paymail$s = req.params.paymail.split('@'), _req$params$paymail$s2 = (0, _slicedToArray2["default"])(_req$params$paymail$s, 2), name = _req$params$paymail$s2[0], domain = _req$params$paymail$s2[1];
                amount = req.query.amount;
                purpose = req.query.purpose;
                prid = req.query.prid;
                paymentUrl = joinUrls(baseUrl.href, getBaseRoute(config), '/bip270/{alias}@{domain.tld}/');
                _context.next = 7;
                return config.bip270.getPaymentRequest(paymentUrl, name, domain, amount, purpose, prid);

              case 7:
                paymentRequest = _context.sent;
                res.send(paymentRequest.toJSON());

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()));
    router.post('/bip270/:paymail/', (0, _expressAsyncHandler["default"])(
    /*#__PURE__*/
    function () {
      var _ref2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(req, res) {
        var _req$params$paymail$s3, _req$params$paymail$s4, name, domain, payment, paymentAck;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _req$params$paymail$s3 = req.params.paymail.split('@'), _req$params$paymail$s4 = (0, _slicedToArray2["default"])(_req$params$paymail$s3, 2), name = _req$params$paymail$s4[0], domain = _req$params$paymail$s4[1];
                payment = Payment.fromJSON(req.body);
                _context2.next = 4;
                return config.bip270.getPaymentAck(name, domain, payment);

              case 4:
                paymentAck = _context2.sent;
                res.send(paymentAck.toJSON());

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x3, _x4) {
        return _ref2.apply(this, arguments);
      };
    }()));
    ifPresent(router);
  }
};

exports.buildBip270Router = buildBip270Router;